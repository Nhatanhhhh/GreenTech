name: GreenTech CI & Branch Protection

on:
  push:
    branches: [ dev, main, feature/*, bugfix/*, hotfix/* ]
  pull_request:
    branches: [ dev, main ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NODE_ENV: test

jobs:
  # Job 1: Check Push Authorization for dev/main
  check-push-authorization:
    name: Check Push Authorization
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Check if user is authorized to push to protected branches
      run: |
        echo "üîí Checking push authorization for ${{ github.ref_name }}"
        echo "User: ${{ github.actor }}"
        
        # Get authorized users from environment variable (support multiple users)
        AUTHORIZED_USERS="${{ secrets.AUTHORIZED_USERS }}"
        
        if echo "$AUTHORIZED_USERS" | grep -qw "${{ github.actor }}"; then
          echo "‚úÖ Authorized user detected: ${{ github.actor }}"
          echo "‚úÖ Push to ${{ github.ref_name }} is allowed"
        else
          echo "‚ùå UNAUTHORIZED: User '${{ github.actor }}' is not authorized to push to ${{ github.ref_name }}"
          echo "‚ùå Only authorized users are allowed to push to protected branches"
          echo "‚úÖ Please create a pull request instead"
          exit 1
        fi

  # Job 2: CI - Build and Test (unified for all branches)
  ci-build-test:
    name: CI - Build and Test
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'push')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: GreenTechMVC/package-lock.json
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore .NET dependencies
      run: dotnet restore
      
    - name: Install Node.js dependencies
      run: |
        cd GreenTechMVC
        npm ci
      
    - name: Build .NET solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Build Node.js CSS
      run: |
        cd GreenTechMVC
        npm run css:build
      continue-on-error: true
      
    - name: Run .NET tests
      run: |
        echo "üß™ Running tests..."
        if dotnet test --no-build --no-restore --configuration Release --verbosity normal; then
          echo "‚úÖ All tests passed"
        else
          echo "‚ùå Some tests failed"
          echo "üëâ Please review the test output above and fix failing tests"
          exit 1
        fi
      
    - name: Check code formatting
      run: |
        echo "üîç Checking code formatting..."
        if dotnet format --verify-no-changes --verbosity diagnostic; then
          echo "‚úÖ Code formatting is correct"
        else
          echo "‚ùå Code formatting issues detected"
          echo "üëâ Please run 'dotnet format' locally and commit the changes"
          exit 1
        fi
      
    - name: Check build warnings
      run: |
        echo "üîç Checking for build warnings..."
        if dotnet build --no-restore --configuration Release --verbosity normal 2>&1 | grep -i "warning"; then
          echo "‚ö†Ô∏è  Build warnings detected"
          echo "Consider fixing warnings before merging"
        else
          echo "‚úÖ No build warnings"
        fi
      
    - name: Post warnings to PR (if any)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const warnings = `‚ö†Ô∏è **Build Warnings Detected**
          
          Please consider fixing the warnings shown in the CI logs before merging.
          
          This is an advisory message and will not block the merge, but it's recommended to address these warnings for better code quality.`
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: warnings
          })
      continue-on-error: true

  # Job 3: Pull Request Merge Authorization
  pr-merge-authorization:
    name: PR Merge Authorization
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.base_ref == 'dev' || github.base_ref == 'main')
    
    steps:
    - name: Check merge authorization
      run: |
        echo "üîí Checking merge authorization for PR to ${{ github.base_ref }}"
        echo "PR Author: ${{ github.actor }}"
        echo "Target Branch: ${{ github.base_ref }}"
        
        # Get authorized users from environment variable (support multiple users)
        AUTHORIZED_USERS="${{ secrets.AUTHORIZED_USERS }}"
        
        if echo "$AUTHORIZED_USERS" | grep -qw "${{ github.actor }}"; then
          echo "‚úÖ Authorized user detected: ${{ github.actor }}"
          echo "‚úÖ This user can merge PR to ${{ github.base_ref }}"
        else
          echo "‚ùå UNAUTHORIZED: User '${{ github.actor }}' cannot merge to ${{ github.base_ref }}"
          echo "‚ùå Only authorized users are authorized to merge to protected branches"
          echo "‚úÖ Please request review from authorized users"
        fi

  # Job 4: Post CI Results to PR
  post-ci-results:
    name: Post CI Results to PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && always()
    needs: [ci-build-test]
    
    steps:
    - name: Post CI failure details to PR
      if: needs.ci-build-test.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const failureMessage = `‚ùå **CI Build Failed**
          
          The CI build has failed. Please check the following:
          
          üîç **Common Issues:**
          - **Tests failed**: Check the test output in the CI logs
          - **Code formatting issues**: Run \`dotnet format\` locally and commit changes
          - **Build errors**: Check for compilation errors in the CI logs
          - **Node.js build issues**: Check if CSS build is working properly
          
          üìã **Next Steps:**
          1. Review the CI logs above for specific error details
          2. Fix the issues locally
          3. Push your changes to trigger a new CI run
          4. Ensure all checks pass before requesting review
          
          üí° **Need Help?**
          - Check the project documentation
          - Ask team members for assistance
          - Review similar issues in the repository`
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: failureMessage
          })
    
    - name: Post CI success message to PR
      if: needs.ci-build-test.result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const successMessage = `‚úÖ **CI Build Passed**
          
          All CI checks have passed successfully! üéâ
          
          üìã **What was checked:**
          - ‚úÖ .NET solution build
          - ‚úÖ Node.js dependencies and CSS build
          - ‚úÖ All tests passed
          - ‚úÖ Code formatting is correct
          - ‚úÖ No critical build warnings
          
          üöÄ **Ready for review!**
          This PR is ready for code review and potential merge.`
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: successMessage
          })
