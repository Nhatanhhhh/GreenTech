// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251101061501_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClickCount")
                        .HasColumnType("int")
                        .HasColumnName("click_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("link_url");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("banners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClickCount = 0,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Nền tảng mua sắm cây cảnh số 1 Việt Nam",
                            EndDate = new DateTime(2026, 4, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ImageUrl = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761619562/Screenshot_2081_gnwkty.png",
                            IsActive = true,
                            LinkUrl = "/#",
                            Position = "HOME_SLIDER",
                            SortOrder = 1,
                            StartDate = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Title = "Chào mừng đến với GreenTech",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            ClickCount = 0,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Áp dụng cho khách hàng mới",
                            EndDate = new DateTime(2026, 1, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ImageUrl = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761618541/Baner_m0uvff.jpg",
                            IsActive = true,
                            LinkUrl = "/#",
                            Position = "HOME_SLIDER",
                            SortOrder = 2,
                            StartDate = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Title = "Giảm giá 20% cho đơn đầu tiên",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DAL.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("excerpt");

                    b.Property<string>("FeaturedImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("featured_image");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("published_at");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("seo_description");

                    b.Property<string>("SeoTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("seo_title");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            Content = "Nội dung chi tiết về cách chăm sóc cây cảnh...",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Excerpt = "Hướng dẫn chi tiết cách chăm sóc cây cảnh trong nhà để cây luôn xanh tươi, khỏe mạnh.",
                            FeaturedImage = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761618345/cach-cham-soc-cay-xanh-trong-nha-3_jwt3pb.webp",
                            IsFeatured = true,
                            IsPublished = true,
                            PublishedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            SeoDescription = "Tổng hợp những bí quyết chăm sóc cây cảnh trong nhà hiệu quả, giúp không gian sống thêm xanh.",
                            SeoTitle = "Cách chăm sóc cây cảnh trong nhà - Hướng dẫn chi tiết",
                            Slug = "cach-cham-soc-cay-canh-trong-nha",
                            Tags = "cham-soc-cay,cay-trong-nha,meo-hay",
                            Title = "Cách chăm sóc cây cảnh trong nhà",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CategoryId = 1,
                            Content = "Nội dung chi tiết về các loại cây phong thủy...",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Excerpt = "Khám phá 10 loại cây phong thủy mang lại tài lộc, may mắn cho gia đình.",
                            FeaturedImage = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761618409/top-19-loai-cay-canh-trong-nha-hop-phong-thuy-va-de-cham-soc-nhat-hien-nay-651645fae15e8c8b38af38ad_flrmui.webp",
                            IsFeatured = false,
                            IsPublished = true,
                            PublishedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            SeoDescription = "Danh sách các loại cây phong thủy nên trồng trong nhà để mang lại may mắn và tài lộc.",
                            SeoTitle = "Top 10 cây phong thủy - Mang tài lộc vào nhà",
                            Slug = "top-10-loai-cay-phong-thuy",
                            Tags = "phong-thuy,cay-phong-thuy,tai-loc",
                            Title = "Top 10 loại cây phong thủy",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("DAL.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("discount_amount");

                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("session_id");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("subtotal");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int")
                        .HasColumnName("total_items");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            DiscountAmount = 0m,
                            Subtotal = 0m,
                            TotalItems = 0,
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            DiscountAmount = 0m,
                            Subtotal = 0m,
                            TotalItems = 0,
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            DiscountAmount = 0m,
                            Subtotal = 0m,
                            TotalItems = 0,
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("added_at");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_image");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductSku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_sku");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("CartId", "ProductId")
                        .IsUnique();

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Các loại cây phù hợp trồng trong nhà, văn phòng.",
                            Image = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620174/trong-cay-van-phong-cay-trong-van-phong-dep-1_otymq5.jpg",
                            IsActive = true,
                            Name = "Cây Trong Nhà",
                            Slug = "cay-trong-nha",
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Các loại cây cảnh, cây ăn quả trồng ngoài trời.",
                            Image = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620241/147202426979463-collage_tl9zw4.jpg",
                            IsActive = true,
                            Name = "Cây Ngoài Trời",
                            Slug = "cay-ngoai-troi",
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DAL.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("MinOrderAmount")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("min_order_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("PointsUsed")
                        .HasColumnType("int")
                        .HasColumnName("points_used");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("source");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("template_id");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int")
                        .HasColumnName("used_count");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("coupons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "WELCOME10",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            DiscountType = "PERCENT",
                            DiscountValue = 10m,
                            EndDate = new DateTime(2025, 12, 27, 3, 25, 6, 233, DateTimeKind.Utc),
                            IsActive = true,
                            MinOrderAmount = 500000m,
                            Name = "Chào mừng giảm 10%",
                            PointsUsed = 0,
                            Source = "SYSTEM",
                            StartDate = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            TemplateId = 1,
                            UsageLimit = 100,
                            UsedCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "VIP100K",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            DiscountType = "FIXED_AMOUNT",
                            DiscountValue = 100000m,
                            EndDate = new DateTime(2026, 1, 26, 3, 25, 6, 233, DateTimeKind.Utc),
                            IsActive = true,
                            MinOrderAmount = 1000000m,
                            Name = "VIP giảm 100K",
                            PointsUsed = 0,
                            Source = "PROMOTION",
                            StartDate = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            TemplateId = 2,
                            UsageLimit = 50,
                            UsedCount = 0
                        });
                });

            modelBuilder.Entity("DAL.Models.CouponTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount_value");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("MinOrderAmount")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("min_order_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("PointsCost")
                        .HasColumnType("int")
                        .HasColumnName("points_cost");

                    b.Property<int?>("TotalUsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("total_usage_limit");

                    b.Property<int>("UsageLimitPerUser")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit_per_user");

                    b.Property<int>("ValidDays")
                        .HasColumnType("int")
                        .HasColumnName("valid_days");

                    b.HasKey("Id");

                    b.ToTable("coupon_templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Áp dụng cho đơn hàng tối thiểu 500.000 VNĐ",
                            DiscountType = "PERCENT",
                            DiscountValue = 10m,
                            IsActive = true,
                            MinOrderAmount = 500000m,
                            Name = "Giảm 10% cho đơn hàng trên 500K",
                            PointsCost = 500,
                            TotalUsageLimit = 100,
                            UsageLimitPerUser = 2,
                            ValidDays = 30
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Áp dụng cho đơn hàng tối thiểu 1.000.000 VNĐ",
                            DiscountType = "FIXED_AMOUNT",
                            DiscountValue = 100000m,
                            IsActive = true,
                            MinOrderAmount = 1000000m,
                            Name = "Giảm 100K cho đơn hàng trên 1 triệu",
                            PointsCost = 800,
                            TotalUsageLimit = 50,
                            UsageLimitPerUser = 1,
                            ValidDays = 60
                        });
                });

            modelBuilder.Entity("DAL.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("read_at");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            IsRead = false,
                            Message = "Cảm ơn bạn đã đăng ký tài khoản! Bạn có 10.000 điểm thưởng.",
                            Priority = "MEDIUM",
                            Title = "Chào mừng đến với GreenTech",
                            Type = "SYSTEM",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("CancelledReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cancelled_reason");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("customer_phone");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("delivered_at");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("discount_amount");

                    b.Property<string>("GatewayTransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gateway_transaction_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentGateway")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_gateway");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_status");

                    b.Property<DateTime?>("PointsAwardedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("points_awarded_at");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("shipped_at");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shipping_address");

                    b.Property<decimal>("ShippingFee")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("shipping_fee");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal>("WalletAmountUsed")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("wallet_amount_used");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("DAL.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("PointsPerItem")
                        .HasColumnType("int")
                        .HasColumnName("points_per_item");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductSku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("product_sku");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Total")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total");

                    b.Property<decimal>("UnitCostPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("unit_cost_price");

                    b.Property<decimal>("UnitSellPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("unit_sell_price");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("DAL.Models.PointEarningRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("MaxPointsPerOrder")
                        .HasColumnType("int")
                        .HasColumnName("max_points_per_order");

                    b.Property<decimal>("MinOrderAmount")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("min_order_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("PointsPerAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("points_per_amount");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_until");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("point_earning_rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            CreatedBy = 1,
                            IsActive = true,
                            MaxPointsPerOrder = 1000,
                            MinOrderAmount = 0m,
                            Name = "Quy tắc tích điểm chuẩn",
                            PointsPerAmount = 1m,
                            ValidFrom = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            CreatedBy = 1,
                            IsActive = true,
                            MaxPointsPerOrder = 2000,
                            MinOrderAmount = 1000000m,
                            Name = "Khuyến mãi tích điểm x2",
                            PointsPerAmount = 2m,
                            ValidFrom = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2026, 1, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DAL.Models.PointTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<int?>("PointEarningRuleId")
                        .HasColumnType("int")
                        .HasColumnName("point_earning_rule_id");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int>("PointsAfter")
                        .HasColumnType("int")
                        .HasColumnName("points_after");

                    b.Property<int>("PointsBefore")
                        .HasColumnType("int")
                        .HasColumnName("points_before");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference_type");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PointEarningRuleId");

                    b.HasIndex("UserId");

                    b.ToTable("point_transactions");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CareInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("care_instructions");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("cost_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("dimensions");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("is_featured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PlantSize")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("plant_size");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SellPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("sell_price");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("seo_description");

                    b.Property<string>("SeoTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("seo_title");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("short_description");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sku");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("tags");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CareInstructions = "Tưới nước vừa phải khi đất khô. Tránh ánh nắng trực tiếp quá gắt.",
                            CategoryId = 1,
                            CostPrice = 200000m,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Cây Lưỡi Hổ (Sansevieria trifasciata) là loại cây phổ biến, dễ chăm sóc, có khả năng lọc bỏ các độc tố trong không khí.",
                            Dimensions = "Chậu 15cm",
                            Image = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620341/cay-luoi-ho-ten-khoa-hoc-sansevieria-trifasciata_v0kubp.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Name = "Cây Lưỡi Hổ",
                            PlantSize = "Nhỏ (30-40cm)",
                            PointsEarned = 10,
                            Quantity = 50,
                            SellPrice = 150000m,
                            SeoDescription = "Cây Lưỡi Hổ đẹp, giá tốt, phù hợp trang trí nhà cửa, văn phòng. Giúp thanh lọc không khí hiệu quả.",
                            SeoTitle = "Mua Cây Lưỡi Hổ - Lọc Không Khí, Dễ Chăm Sóc",
                            ShortDescription = "Cây phong thủy, lọc không khí tốt.",
                            Sku = "CLH001",
                            Slug = "cay-luoi-ho",
                            SupplierId = 1,
                            Tags = "cay-trong-nha,phong-thuy,loc-khong-khi",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Weight = 1.5m
                        },
                        new
                        {
                            Id = 2,
                            CareInstructions = "Ưa bóng râm, tưới nước 2-3 lần/tuần. Bón phân định kỳ.",
                            CategoryId = 1,
                            CostPrice = 350000m,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Cây Phát Tài (Dracaena fragrans) hay còn gọi là Thiết Mộc Lan, được tin là mang lại may mắn và tài lộc. Cây có sức sống tốt, dễ trồng.",
                            Dimensions = "Chậu 25cm",
                            Image = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620487/ca_CC_81ch-cha_CC_86m-so_CC_81c-ca_CC_82y-pha_CC_81t-ta_CC_80i-de_CC_82_CC_89-trong-nha_CC_80_mmkhjo.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Name = "Cây Phát Tài",
                            PlantSize = "Trung bình (60-80cm)",
                            PointsEarned = 30,
                            Quantity = 30,
                            SellPrice = 250000m,
                            SeoDescription = "Bán cây Phát Tài hợp phong thủy, trang trí nội thất sang trọng. Cây dễ chăm, mang lại vượng khí.",
                            SeoTitle = "Cây Phát Tài (Thiết Mộc Lan) - Mang May Mắn, Tài Lộc",
                            ShortDescription = "Mang lại may mắn, tài lộc cho gia chủ.",
                            Sku = "CPT005",
                            Slug = "cay-phat-tai",
                            SupplierId = 1,
                            Tags = "cay-trong-nha,phong-thuy,may-man,tai-loc",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Weight = 3.0m
                        },
                        new
                        {
                            Id = 3,
                            CareInstructions = "Tưới nước khi đất khô. Không cần ánh sáng trực tiếp. Bón phân mỗi tháng một lần.",
                            CategoryId = 1,
                            CostPrice = 150000m,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Cây Trầu Bà (Epipremnum aureum) là một trong những cây lọc không khí tốt nhất. Cây dễ chăm sóc, phù hợp cho người mới bắt đầu.",
                            Dimensions = "Chậu 12cm",
                            Image = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761619808/images_vm4li5.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Name = "Cây Trầu Bà",
                            PlantSize = "Nhỏ (20-30cm)",
                            PointsEarned = 8,
                            Quantity = 80,
                            SellPrice = 80000m,
                            SeoDescription = "Cây Trầu Bà đẹp, dễ chăm, giúp thanh lọc không khí trong nhà hiệu quả.",
                            SeoTitle = "Mua Cây Trầu Bà - Lọc Không Khí Hiệu Quả",
                            ShortDescription = "Cây lọc không khí tuyệt vời, dễ trồng.",
                            Sku = "CTB003",
                            Slug = "cay-trau-ba",
                            SupplierId = 2,
                            Tags = "cay-trong-nha,loc-khong-khi,de-cham",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Weight = 0.8m
                        },
                        new
                        {
                            Id = 4,
                            CareInstructions = "Tưới nước 1-2 lần/tuần. Nên đặt nơi có ánh sáng gián tiếp. Lau lá thường xuyên.",
                            CategoryId = 1,
                            CostPrice = 150000m,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Description = "Cây Đa Búp Đỏ (Ficus elastica) với lá bóng, xanh mướt, mang lại không gian tươi mát cho phòng làm việc.",
                            Dimensions = "Chậu 15cm",
                            Image = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761619886/Cay-da-bup-do_p1whyu.png",
                            IsActive = true,
                            IsFeatured = true,
                            Name = "Cây Đa Búp Đỏ",
                            PlantSize = "Nhỏ (25-35cm)",
                            PointsEarned = 10,
                            Quantity = 60,
                            SellPrice = 100000m,
                            SeoDescription = "Cây Đa Búp Đỏ đẹp, dễ chăm, phù hợp trang trí bàn làm việc, phòng khách.",
                            SeoTitle = "Cây Đa Búp Đỏ - Trang Trí Văn Phòng",
                            ShortDescription = "Cây để bàn làm việc đẹp mắt.",
                            Sku = "CDB004",
                            Slug = "cay-da-bup-do",
                            SupplierId = 3,
                            Tags = "cay-de-ban,tin-cay,xanh-mat",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Weight = 1.2m
                        });
                });

            modelBuilder.Entity("DAL.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("is_primary");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AltText = "Ảnh chi tiết cây Lưỡi Hổ",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ImageUrl = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620780/cay-luoi-ho-2_fxisjk.jpg",
                            IsPrimary = false,
                            ProductId = 1,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            AltText = "Chậu cây Lưỡi Hổ",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ImageUrl = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620716/chau-cay-hoa-de-ban-2_apigsc.jpg",
                            IsPrimary = false,
                            ProductId = 1,
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            AltText = "Thân cây Phát Tài",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ImageUrl = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620845/cay-phat-tai-1-goc-dep_u5pi5c.jpg",
                            IsPrimary = false,
                            ProductId = 2,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 4,
                            AltText = "Cây Trầu Bà nhỏ xinh",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ImageUrl = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620927/trau-ba-mini_jdnmjk.jpg",
                            IsPrimary = false,
                            ProductId = 3,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 5,
                            AltText = "Cây Đa Búp Đỏ đẹp mắt",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            ImageUrl = "https://res.cloudinary.com/dvsqjznt2/image/upload/v1761620976/cay-da-bup-do_b7k0h6.jpg",
                            IsPrimary = false,
                            ProductId = 4,
                            SortOrder = 1
                        });
                });

            modelBuilder.Entity("DAL.Models.ProductRatingStat", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<decimal>("AverageRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("average_rating");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated");

                    b.Property<int>("Star1Count")
                        .HasColumnType("int")
                        .HasColumnName("star_1_count");

                    b.Property<int>("Star2Count")
                        .HasColumnType("int")
                        .HasColumnName("star_2_count");

                    b.Property<int>("Star3Count")
                        .HasColumnType("int")
                        .HasColumnName("star_3_count");

                    b.Property<int>("Star4Count")
                        .HasColumnType("int")
                        .HasColumnName("star_4_count");

                    b.Property<int>("Star5Count")
                        .HasColumnType("int")
                        .HasColumnName("star_5_count");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int")
                        .HasColumnName("total_reviews");

                    b.Property<int>("WithContentCount")
                        .HasColumnType("int")
                        .HasColumnName("with_content_count");

                    b.Property<int>("WithMediaCount")
                        .HasColumnType("int")
                        .HasColumnName("with_media_count");

                    b.HasKey("ProductId");

                    b.ToTable("product_rating_stats");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AverageRating = 0m,
                            LastUpdated = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Star1Count = 0,
                            Star2Count = 0,
                            Star3Count = 0,
                            Star4Count = 0,
                            Star5Count = 0,
                            TotalReviews = 0,
                            WithContentCount = 0,
                            WithMediaCount = 0
                        },
                        new
                        {
                            ProductId = 2,
                            AverageRating = 0m,
                            LastUpdated = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Star1Count = 0,
                            Star2Count = 0,
                            Star3Count = 0,
                            Star4Count = 0,
                            Star5Count = 0,
                            TotalReviews = 0,
                            WithContentCount = 0,
                            WithMediaCount = 0
                        },
                        new
                        {
                            ProductId = 3,
                            AverageRating = 0m,
                            LastUpdated = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Star1Count = 0,
                            Star2Count = 0,
                            Star3Count = 0,
                            Star4Count = 0,
                            Star5Count = 0,
                            TotalReviews = 0,
                            WithContentCount = 0,
                            WithMediaCount = 0
                        },
                        new
                        {
                            ProductId = 4,
                            AverageRating = 0m,
                            LastUpdated = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Star1Count = 0,
                            Star2Count = 0,
                            Star3Count = 0,
                            Star4Count = 0,
                            Star5Count = 0,
                            TotalReviews = 0,
                            WithContentCount = 0,
                            WithMediaCount = 0
                        });
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("HelpfulCount")
                        .HasColumnType("int")
                        .HasColumnName("helpful_count");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit")
                        .HasColumnName("is_anonymous");

                    b.Property<string>("MediaUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("media_urls");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("order_item_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("DAL.Models.ReviewReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("review_replies");
                });

            modelBuilder.Entity("DAL.Models.ReviewVote", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("bit")
                        .HasColumnName("is_helpful");

                    b.HasKey("ReviewId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("review_votes");
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            RoleName = "ROLE_ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            RoleName = "ROLE_CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            RoleName = "ROLE_STAFF"
                        });
                });

            modelBuilder.Entity("DAL.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_person");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("payment_terms");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tax_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Khu Công Nghiệp Trà Nóc, Cần Thơ",
                            Code = "VX001",
                            ContactPerson = "Ms. Lan",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Email = "vuonxinh@supplier.com",
                            IsActive = true,
                            Name = "Nhà Cung Cấp Vườn Xinh",
                            PaymentTerms = "30 ngày",
                            Phone = "02923111222",
                            TaxCode = "1234567890",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Address = "12 Đường 3/2, Quận Ninh Kiều, TP. Cần Thơ",
                            Code = "CXABC001",
                            ContactPerson = "Mr. Hai",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Email = "cayxanh@abc.com",
                            IsActive = true,
                            Name = "Công ty Cây Xanh ABC",
                            PaymentTerms = "60 ngày",
                            Phone = "02923888999",
                            TaxCode = "9876543210",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Đường 30/4, Quận Cai Rang, TP. Cần Thơ",
                            Code = "NVST001",
                            ContactPerson = "Ms. Mai",
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Email = "sinhthai@nhavuon.com",
                            IsActive = true,
                            Name = "Nhà Vườn Sinh Thái",
                            PaymentTerms = "45 ngày",
                            Phone = "02923555777",
                            TaxCode = "5555555555",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("district");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("PhoneVerifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("phone_verified_at");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("province");

                    b.Property<string>("SpecificAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("specific_address");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("WalletBalance")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("wallet_balance");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ward");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            District = "Ninh Kieu",
                            Email = "admin@example.com",
                            EmailVerifiedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            FullName = "Admin User",
                            Password = "Vm9pY2VzQW5kRnVyaWVz:Sv7Awsgb6kcKRMp6O2tJ9Hcc339MpGiw8Cn+BF+D2vuwF/8V63bLOCxwfkaS4j9TLKIHKeJozDBingSJnXw+qw==",
                            Phone = "0123456789",
                            PhoneVerifiedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Points = 0,
                            Province = "Can Tho",
                            SpecificAddress = "123 Admin St",
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            WalletBalance = 0m,
                            Ward = "An Khanh"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            District = "Cai Rang",
                            Email = "customer@example.com",
                            EmailVerifiedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            FullName = "Customer User",
                            Password = "Vm9pY2VzQW5kRnVyaWVz:LNzQLICso8gipi0mT7+EI013y7r9ZKmPb6G0WM5v70zH0nwlN9IQXSuml2XgLALgJaiQt0vtxJBw6Jv4PjWRTA==",
                            Phone = "0987654321",
                            PhoneVerifiedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Points = 100,
                            Province = "Can Tho",
                            SpecificAddress = "456 Customer Ave",
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            WalletBalance = 50000m,
                            Ward = "Le Binh"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            District = "Ninh Kieu",
                            Email = "staff@example.com",
                            EmailVerifiedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            FullName = "Staff User",
                            Password = "Vm9pY2VzQW5kRnVyaWVz:WfPffOpZD2DsxmZ2+l1KKUUcpJX9G9hP05R3bWGaYnE8Y811EnH493YgJ6PhGpP6We7DODJ1fum+bGiJUOJ5Pw==",
                            Phone = "0111222333",
                            PhoneVerifiedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            Points = 0,
                            Province = "Can Tho",
                            SpecificAddress = "789 Staff Street",
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 10, 28, 3, 25, 6, 233, DateTimeKind.Utc),
                            WalletBalance = 0m,
                            Ward = "Xuan Khanh"
                        });
                });

            modelBuilder.Entity("DAL.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("BalanceAfter")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("balance_after");

                    b.Property<decimal>("BalanceBefore")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("balance_before");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("GatewayTransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gateway_transaction_id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentGateway")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_gateway");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("processed_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("wallet_transactions");
                });

            modelBuilder.Entity("DAL.Models.Banner", b =>
                {
                    b.HasOne("DAL.Models.User", "Creator")
                        .WithMany("Banners")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DAL.Models.Blog", b =>
                {
                    b.HasOne("DAL.Models.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Models.Cart", b =>
                {
                    b.HasOne("DAL.Models.Coupon", "Coupon")
                        .WithMany("Carts")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("DAL.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.CartItem", b =>
                {
                    b.HasOne("DAL.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Models.Category", b =>
                {
                    b.HasOne("DAL.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DAL.Models.Coupon", b =>
                {
                    b.HasOne("DAL.Models.CouponTemplate", "CouponTemplate")
                        .WithMany("Coupons")
                        .HasForeignKey("TemplateId");

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Coupons")
                        .HasForeignKey("UserId");

                    b.Navigation("CouponTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Notification", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.HasOne("DAL.Models.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.OrderItem", b =>
                {
                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Models.PointEarningRule", b =>
                {
                    b.HasOne("DAL.Models.User", "Creator")
                        .WithMany("PointEarningRulesCreated")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DAL.Models.PointTransaction", b =>
                {
                    b.HasOne("DAL.Models.PointEarningRule", "PointEarningRule")
                        .WithMany("PointTransactions")
                        .HasForeignKey("PointEarningRuleId");

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("PointTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointEarningRule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.HasOne("DAL.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DAL.Models.ProductImage", b =>
                {
                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Models.ProductRatingStat", b =>
                {
                    b.HasOne("DAL.Models.Product", "Product")
                        .WithOne("ProductRatingStat")
                        .HasForeignKey("DAL.Models.ProductRatingStat", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.HasOne("DAL.Models.OrderItem", "OrderItem")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.ReviewReply", b =>
                {
                    b.HasOne("DAL.Models.Review", "Review")
                        .WithMany("ReviewReplies")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("ReviewReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.ReviewVote", b =>
                {
                    b.HasOne("DAL.Models.Review", "Review")
                        .WithMany("ReviewVotes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("ReviewVotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.UserRole", b =>
                {
                    b.HasOne("DAL.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.WalletTransaction", b =>
                {
                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DAL.Models.Category", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DAL.Models.Coupon", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Models.CouponTemplate", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("DAL.Models.OrderItem", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Models.PointEarningRule", b =>
                {
                    b.Navigation("PointTransactions");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductRatingStat")
                        .IsRequired();

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.Navigation("ReviewReplies");

                    b.Navigation("ReviewVotes");
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DAL.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("Banners");

                    b.Navigation("Blogs");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Coupons");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("PointEarningRulesCreated");

                    b.Navigation("PointTransactions");

                    b.Navigation("ReviewReplies");

                    b.Navigation("ReviewVotes");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
